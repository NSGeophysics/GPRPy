# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import copy
import os
import pickle
from tkinter import messagebox
from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib import pyplot as plt
from matplotlib.backend_bases import FigureCanvasBase
import numpy as np
from PyQt5.QtWidgets import QFileDialog, QInputDialog
from PyQt5.QtWidgets import QMessageBox

from gprpy.toolbox import gprIO_DT1, gprIO_DZT
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt

class Ui_MainWindow(object):

    def __init__(self,filename=None,dtype=None):
        '''
        Initialization for a gprpyCW object. Initialization can be 
        empty or with a provided filename for the GPR data and 
        a data type.

        INPUT:
        filename     data file name. Currently supported formats:
                     .gpr (GPRPy), .DT1 (SnS), .DZT (GSSI), .rd3 (MALA),
                     and ENVI standard BSQ.
        dtype        data type. Either "CMP" or "WARR"
        '''
        # Inheriting the initializer from the gprpyProfile class
        super().__init__()
        self.history = ["mygpr = gp.gprpyCW()"]
        # Initialize previous for undo
        self.previous = {}
        self.dtype = dtype
        # Stacked amplitude plots
        self.linStAmp = None
        self.hypStAmp = None
        # Picked lines and hyperbolae
        self.lins = list()
        self.hyps = list()
        
        if (filename is not None) and (dtype is not None):
            self.importdata(filename,dtype)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1085, 809)
        MainWindow.setAutoFillBackground(True)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.mainFrame = QtWidgets.QFrame(self.centralwidget)
        self.mainFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.mainFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.mainFrame.setObjectName("mainFrame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.mainFrame)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.headerFrame = QtWidgets.QFrame(self.mainFrame)
        self.headerFrame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.headerFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.headerFrame.setObjectName("headerFrame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.headerFrame)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.sandwichMenuFrame = QtWidgets.QFrame(self.headerFrame)
        self.sandwichMenuFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.sandwichMenuFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.sandwichMenuFrame.setObjectName("sandwichMenuFrame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.sandwichMenuFrame)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.menuButton = QtWidgets.QPushButton(self.sandwichMenuFrame)
        self.menuButton.setObjectName("menuButton")
        self.horizontalLayout_3.addWidget(self.menuButton)
        self.horizontalLayout.addWidget(self.sandwichMenuFrame)
        self.logoFrame = QtWidgets.QFrame(self.headerFrame)
        self.logoFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.logoFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.logoFrame.setObjectName("logoFrame")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.logoFrame)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label = QtWidgets.QLabel(self.logoFrame)
        self.label.setObjectName("label")
        self.horizontalLayout_4.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout.addWidget(self.logoFrame)
        self.windowOperationFrame = QtWidgets.QFrame(self.headerFrame)
        self.windowOperationFrame.setAutoFillBackground(True)
        self.windowOperationFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.windowOperationFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.windowOperationFrame.setObjectName("windowOperationFrame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.windowOperationFrame)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.minimize = QtWidgets.QPushButton(self.windowOperationFrame)
        self.minimize.setObjectName("minimize")
        self.horizontalLayout_2.addWidget(self.minimize)
        self.fullscreenbutton = QtWidgets.QPushButton(self.windowOperationFrame)
        self.fullscreenbutton.setObjectName("fullscreenbutton")
        self.horizontalLayout_2.addWidget(self.fullscreenbutton)
        self.exitbutton = QtWidgets.QPushButton(self.windowOperationFrame)
        self.exitbutton.setObjectName("exitbutton")
        self.horizontalLayout_2.addWidget(self.exitbutton)
        self.horizontalLayout.addWidget(self.windowOperationFrame)
        self.verticalLayout_2.addWidget(self.headerFrame, 0, QtCore.Qt.AlignTop)
        self.mainBodyFrame = QtWidgets.QFrame(self.mainFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainBodyFrame.sizePolicy().hasHeightForWidth())
        self.mainBodyFrame.setSizePolicy(sizePolicy)
        self.mainBodyFrame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.mainBodyFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.mainBodyFrame.setObjectName("mainBodyFrame")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.mainBodyFrame)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.mainMenu = QtWidgets.QFrame(self.mainBodyFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainMenu.sizePolicy().hasHeightForWidth())
        self.mainMenu.setSizePolicy(sizePolicy)
        self.mainMenu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.mainMenu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.mainMenu.setObjectName("mainMenu")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.mainMenu)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.menuFrame = QtWidgets.QFrame(self.mainMenu)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menuFrame.sizePolicy().hasHeightForWidth())
        self.menuFrame.setSizePolicy(sizePolicy)
        self.menuFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.menuFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.menuFrame.setObjectName("menuFrame")
        self.gridLayout = QtWidgets.QGridLayout(self.menuFrame)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_3 = QtWidgets.QPushButton(self.menuFrame)
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 2, 0, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.menuFrame)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 4, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.menuFrame)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 1, 1, 1)
        self.fileMenuButton = QtWidgets.QPushButton(self.menuFrame)
        self.fileMenuButton.setObjectName("fileMenuButton")
        self.gridLayout.addWidget(self.fileMenuButton, 1, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.menuFrame)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 1, 1, 1)
        self.homePageButton = QtWidgets.QPushButton(self.menuFrame)
        self.homePageButton.setObjectName("homePageButton")
        self.gridLayout.addWidget(self.homePageButton, 0, 0, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.menuFrame)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 3, 0, 1, 1)
        self.pushButton_6 = QtWidgets.QPushButton(self.menuFrame)
        self.pushButton_6.setObjectName("pushButton_6")
        self.gridLayout.addWidget(self.pushButton_6, 5, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.menuFrame)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 2, 1, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.menuFrame)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 3, 1, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.menuFrame)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 4, 1, 1, 1)
        self.label_9 = QtWidgets.QLabel(self.menuFrame)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 5, 1, 1, 1)
        self.verticalLayout_6.addWidget(self.menuFrame)
        self.horizontalLayout_7.addWidget(self.mainMenu)
        self.secondMenu = QtWidgets.QFrame(self.mainBodyFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.secondMenu.sizePolicy().hasHeightForWidth())
        self.secondMenu.setSizePolicy(sizePolicy)
        self.secondMenu.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.secondMenu.setFrameShadow(QtWidgets.QFrame.Raised)
        self.secondMenu.setObjectName("secondMenu")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.secondMenu)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.stackedWidget = QtWidgets.QStackedWidget(self.secondMenu)
        self.stackedWidget.setObjectName("stackedWidget")
        self.homepageWidget = QtWidgets.QWidget()
        self.homepageWidget.setObjectName("homepageWidget")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.homepageWidget)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.menuFrame_2 = QtWidgets.QFrame(self.homepageWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menuFrame_2.sizePolicy().hasHeightForWidth())
        self.menuFrame_2.setSizePolicy(sizePolicy)
        self.menuFrame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.menuFrame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.menuFrame_2.setObjectName("menuFrame_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.menuFrame_2)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_11 = QtWidgets.QLabel(self.menuFrame_2)
        self.label_11.setObjectName("label_11")
        self.gridLayout_2.addWidget(self.label_11, 1, 1, 1, 1)
        self.pushButton_9 = QtWidgets.QPushButton(self.menuFrame_2)
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout_2.addWidget(self.pushButton_9, 1, 0, 1, 1)
        self.label_10 = QtWidgets.QLabel(self.menuFrame_2)
        self.label_10.setObjectName("label_10")
        self.gridLayout_2.addWidget(self.label_10, 0, 1, 1, 1)
        self.pushButton_10 = QtWidgets.QPushButton(self.menuFrame_2)
        self.pushButton_10.setObjectName("pushButton_10")
        self.gridLayout_2.addWidget(self.pushButton_10, 0, 0, 1, 1)
        self.horizontalLayout_8.addWidget(self.menuFrame_2)
        self.stackedWidget.addWidget(self.homepageWidget)
        self.fileoperationspageWidget = QtWidgets.QWidget()
        self.fileoperationspageWidget.setObjectName("fileoperationspageWidget")
        self.label_16 = QtWidgets.QLabel(self.fileoperationspageWidget)
        self.label_16.setGeometry(QtCore.QRect(160, 70, 141, 61))
        self.label_16.setObjectName("label_16")
        self.stackedWidget.addWidget(self.fileoperationspageWidget)
        self.verticalLayout_4.addWidget(self.stackedWidget)
        self.horizontalLayout_7.addWidget(self.secondMenu)
        self.viewingWindow = QtWidgets.QFrame(self.mainBodyFrame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.viewingWindow.sizePolicy().hasHeightForWidth())
        self.viewingWindow.setSizePolicy(sizePolicy)
        self.viewingWindow.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.viewingWindow.setFrameShadow(QtWidgets.QFrame.Raised)
        self.viewingWindow.setObjectName("viewingWindow")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.viewingWindow)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.stackedWidget_2 = QtWidgets.QStackedWidget(self.viewingWindow)
        self.stackedWidget_2.setObjectName("stackedWidget_2")
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.stackedWidget_2.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.stackedWidget_2.addWidget(self.page_4)
        self.verticalLayout_5.addWidget(self.stackedWidget_2)
        self.horizontalLayout_7.addWidget(self.viewingWindow)
        self.verticalLayout_2.addWidget(self.mainBodyFrame)
        self.footerFrame = QtWidgets.QFrame(self.mainFrame)
        self.footerFrame.setAutoFillBackground(True)
        self.footerFrame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.footerFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.footerFrame.setObjectName("footerFrame")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.footerFrame)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.frame = QtWidgets.QFrame(self.footerFrame)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.horizontalLayout_5.addWidget(self.frame)
        self.frame_2 = QtWidgets.QFrame(self.footerFrame)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_3 = QtWidgets.QLabel(self.frame_2)
        self.label_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_6.addWidget(self.label_3)
        self.horizontalLayout_5.addWidget(self.frame_2)
        self.verticalLayout_2.addWidget(self.footerFrame, 0, QtCore.Qt.AlignBottom)
        self.verticalLayout.addWidget(self.mainFrame)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        self.menuButton.setText(_translate("MainWindow", "menu here"))
        self.label.setText(_translate("MainWindow", "Logo Here"))
        self.minimize.setText(_translate("MainWindow", "minimize"))
        self.fullscreenbutton.setText(_translate("MainWindow", "fullscreen"))
        self.exitbutton.setText(_translate("MainWindow", "EXIT"))
        self.pushButton_3.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_5.setText(_translate("MainWindow", "PushButton"))
        self.label_4.setText(_translate("MainWindow", "Home"))
        self.fileMenuButton.setText(_translate("MainWindow", "PushButton"))
        self.label_5.setText(_translate("MainWindow", "Files"))
        self.homePageButton.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_4.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_6.setText(_translate("MainWindow", "PushButton"))
        self.label_6.setText(_translate("MainWindow", "TextLabel"))
        self.label_7.setText(_translate("MainWindow", "TextLabel"))
        self.label_8.setText(_translate("MainWindow", "TextLabel"))
        self.label_9.setText(_translate("MainWindow", "TextLabel"))
        self.label_11.setText(_translate("MainWindow", "Export file"))
        self.pushButton_9.setText(_translate("MainWindow", "PushButton"))
        # self.label_10.setText(_translate("MainWindow", "Load FIle"))
        self.pushButton_10.setText(_translate("MainWindow", "Import Data"))
        self.label_16.setText(_translate("MainWindow", "File Operations"))
        self.label_2.setText(_translate("MainWindow", "CopyRight etc"))
        self.label_3.setText(_translate("MainWindow", "?       "))

        #switch on menu
        self.fileMenuButton.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.fileoperationspageWidget))
        self.homePageButton.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.homepageWidget))
        self.pushButton_10.clicked.connect(self.openFileDialog)

    def openFileDialog(self):
        try:
            # Open file dialog to select a file
            filename, _ = QFileDialog.getOpenFileName(None, "Select File", "", "All Files (*);;DT1 Files (*.dt1)")

            if filename:
                dtype = self.get_data_type_from_user()
                # Call importdata method with the selected filename
                if dtype:
                    # Call importdata method with the selected filename and data type
                    self.importdata(filename)
        except Exception as e:
            print("An error occurred:", e)

        


    def get_data_type_from_user(self):
        # Options for the data type
        options = ["CMP", "WARR"]
        # Prompt user for the data type
        dtype, ok = QInputDialog.getItem(None, "Select Data Type", "Select Data Type:", options, 0, False)
        if ok:
            return dtype
        else:
            # If user cancels, return None
            return None

    def initPrevious(self):
        '''
        Initialization of data strucure that contains the step 
        before the most recent action.
        '''
        self.previous["data"] = self.data
        self.previous["twtt"] = self.twtt 
        self.previous["info"] = self.info
        self.previous["profilePos"] = self.profilePos
        self.previous["velocity"] = self.velocity
        self.previous["depth"] = self.depth
        self.previous["maxTopo"] = self.maxTopo
        self.previous["minTopo"] = self.minTopo
        self.previous["threeD"] = self.threeD
        self.previous["data_pretopo"] = self.data_pretopo
        self.previous["twtt_pretopo"] = self.twtt_pretopo
        histsav = copy.copy(self.history)
        self.previous["history"] = histsav


    def importdata(self, filename):
        file_name, file_ext = os.path.splitext(filename)
        
        try:
            if file_ext == ".DT1" or file_ext == ".HD" or file_ext == ".dt1" or file_ext == ".hd":
                if file_ext == ".DT1" or  file_ext == ".HD":
                    self.data = gprIO_DT1.readdt1(file_name + ".DT1")
                    self.info = gprIO_DT1.readdt1Header(file_name + ".HD")  
                else:
                    self.data = gprIO_DT1.readdt1(file_name + ".dt1")
                    self.info = gprIO_DT1.readdt1Header(file_name + ".hd")
                
                self.profilePos = np.linspace(self.info["Start_pos"], self.info["Final_pos"], self.info["N_traces"])

                sec_per_samp = self.info["Total_time_window"] / self.info["N_pts_per_trace"]
                tshift = self.info["TZ_at_pt"] * sec_per_samp
                
                self.twtt = np.linspace(0, self.info["Total_time_window"], self.info["N_pts_per_trace"]) - tshift

                self.antsep = self.info["Antenna_sep"]
                self.velocity = None
                self.depth = None
                self.maxTopo = None
                self.minTopo = None
                self.threeD = None
                self.data_pretopo = None
                self.twtt_pretopo = None
                
                self.initPrevious()
                
                histstr = "mygpr.importdata('%s')" % (filename)
                self.history.append(histstr)                                
                
            elif file_ext == ".DZT":
                self.data, self.info = gprIO_DZT.readdzt(filename)

                if self.info["rhf_spm"] != 0:
                    self.profilePos = self.info["rhf_position"] + np.linspace(0.0, self.data.shape[1] / self.info["rhf_spm"], self.data.shape[1])
                else:
                    self.profilePos = self.info["rhf_position"] + np.linspace(0.0, self.data.shape[1] / self.info["rhf_sps"], self.data.shape[1])
                    
                self.twtt = np.linspace(0, self.info["rhf_range"], self.info["rh_nsamp"])

                self.antsep = 0
                self.velocity = None
                self.depth = None
                self.maxTopo = None
                self.minTopo = None
                self.threeD = None
                self.data_pretopo = None
                self.twtt_pretopo = None
                
                self.initPrevious()
                
                histstr = "mygpr.importdata('%s')" % (filename)
                self.history.append(histstr)
        
            elif file_ext == ".gpr":
                with open(filename, 'rb') as f:
                    data, info, profilePos, twtt, history, antsep, velocity, depth, maxTopo, minTopo, threeD, data_pretopo, twtt_pretopo = pickle.load(f)
                self.data = data
                self.info = info
                self.profilePos = profilePos
                self.twtt = twtt
                self.history = history
                self.antsep = antsep
                self.velocity = velocity
                self.depth = depth
                self.maxTopo = maxTopo
                self.minTopo = minTopo
                self.threeD = threeD
                self.data_pretopo = data_pretopo
                self.twtt_pretopo = twtt_pretopo
                
                self.initPrevious()
                
            else:
                print("Can only read dt1, DT1, hd, HD, DZT, dat, GPRhdr, rad, rd3, rd7, and gpr files")
            
            # Show success message box
            
            QMessageBox.information(None, "Success", "File uploaded successfully.")
            self.displayDataInViewingWindow()
            
        except Exception as e:
            print("An error occurred:", e)
            QMessageBox.warning(None, "Error", f"An error occurred: {str(e)}")


    def prepCWFig(self, contrast=1.0, color="gray", yrng=None, xrng=None, showlnhp=False):
        '''
        This is a helper function.
        It prepares the plot showing the processed CMP or WARR data.
        
        INPUT:
        color        "gray", or "bwr" for blue-white-red,
                     or any other Matplotlib color map [default: "gray"]
        contrast     Factor to increase contrast by reducing color range.
                     [default = 1.0]
        yrng         y-axis range to show [default: None, meaning "everything"]
        xrng         x-axis range to show [default: None, meaning "everything"]
        showlnhp     show the observed lines and hyperbolae from the list
                     [default: False]

        OUTPUT:
        contrast     contrast value used to prepare the figure 
        color        color value used to prepare the figure
        yrng         yrng value used to prepare the figure
        xrng         xrng value used to prepare the figure 
        showlnhp     showlnhp value used to prepare the figure
        '''
        dx=self.profilePos[3]-self.profilePos[2]
        dt=self.twtt[3]-self.twtt[2]
        stdcont = np.nanmax(np.abs(self.data)[:])       
        
        plt.imshow(self.data,cmap=color,extent=[min(self.profilePos)-dx/2.0,
                                                max(self.profilePos)+dx/2.0,
                                                max(self.twtt)+dt/2.0,
                                                min(self.twtt)-dt/2.0],
                   aspect="auto",vmin=-stdcont/contrast, vmax=stdcont/contrast)
        plt.gca().set_ylabel("time [ns]")
        plt.gca().invert_yaxis()
        if yrng is not None:
            yrng=[np.max(yrng),np.min(yrng)]
        else:
            yrng=[np.max(self.twtt),np.min(self.twtt)]
        plt.ylim(yrng)
            
        if xrng is None:
            xrng=[min(self.profilePos),max(self.profilePos)]                           
        plt.xlim(xrng)

        plt.gca().get_xaxis().set_visible(True)
        plt.gca().get_yaxis().set_visible(True)
        if self.dtype == "WARR":
            plt.gca().set_xlabel("antenna separation [m]")
            typefact=1
        elif self.dtype == "CMP":
            plt.gca().set_xlabel("distance from midpoint [m]")
            typefact=2
        plt.gca().xaxis.tick_top()
        plt.gca().xaxis.set_label_position('top')

        # Show hyperbolae / lines if you want
        if showlnhp:
            if self.lins:
                for lin in self.lins:
                    time = lin[0] + typefact*self.profilePos/lin[1]
                    plt.plot(self.profilePos,time,linewidth=2,color='yellow')
                    plt.plot(self.profilePos,time,linewidth=1,color='black')
            if self.hyps:
                x2 = np.power(typefact*self.profilePos,2.0)
                for hyp in self.hyps:
                    time = np.sqrt(x2 + 4*np.power(hyp[0]/2.0 * hyp[1],2.0))/hyp[1]
                    plt.plot(self.profilePos,time,linewidth=2,color='yellow')
                    plt.plot(self.profilePos,time,linewidth=1,color='black')
                                    
        return contrast, color, yrng, xrng, showlnhp


    def prepStAmpFig(self, whichstamp="lin", saturation=1.0, yrng=None, vrng=None):
        '''
        This is a helper function.
        It prepares the plot showing the stacked amplitudes results.
        
        INPUT:
        whichstamp   is this for the linear ("lin") or hyperbolic ("hyp") 
                     stacked amplitudes
        saturation   Factor to increase contrast by reducing color range.
                     [default = 1.0]
        yrng         y-axis range to show [default: None, meaning "everything"]
        vrng         velocities (x-axis) range to show 
                     [default: None, meaning "everything"]

        OUTPUT:
        whichstamp   whichstamp value used to prepare the figure
        saturation   saturation value used to prepare the figure 
        yrng         yrng value used to prepare the figure 
        vrng         vrng value used to prepare the figure
        '''
        dt=self.twtt[3]-self.twtt[2]
        dv=self.vVals[3]-self.vVals[2]
        if whichstamp == "lin":
            stamp = self.linStAmp
            title = "linear stacked amplitude"
        elif whichstamp == "hyp":
            stamp = self.hypStAmp
            title = "hyperbolic stacked amplitude"
        else:
            stamp = None
            
        if stamp is not None:
            stdcont = np.nanmax(np.abs(stamp)[:])
            plt.imshow(np.flipud(np.abs(stamp)), cmap='inferno',
                       extent=[np.min(self.vVals)-dv/2.0,
                               np.max(self.vVals)+dv/2.0,
                               np.min(self.twtt)-dt/2.0,
                               np.max(self.twtt)+dt/2.0],
                       aspect='auto',
                       vmin=0, vmax=stdcont/saturation)

            if yrng is not None:
                yrng=[np.max(yrng),np.min(yrng)]
            else:
                yrng=[np.max(self.twtt),np.min(self.twtt)]
            plt.ylim(yrng)
            
            if vrng is None:
                vrng=[np.min(self.vVals),np.max(self.vVals)]                           
            plt.xlim(vrng)
                

            plt.gca().set_xlabel("velocity [m/ns]")
            plt.gca().set_ylabel("time [ns]")
            #plt.gca().invert_yaxis()
            plt.gca().set_title(title)
            plt.gca().get_xaxis().set_visible(True)
            plt.gca().get_yaxis().set_visible(True)
            plt.gca().get_xaxis().set_ticks_position('both')
            plt.gca().get_yaxis().set_ticks_position('both')
                                
        return whichstamp, saturation, yrng, vrng

    def showCWFig(self, **kwargs):
        '''
        Plots the CMP or WARR data using Matplotlib. 
        You need to run .show() afterward to show it 

        INPUT:
        color        "gray", or "bwr" for blue-white-red,
                     or any other Matplotlib color map [default: "gray"]
        contrast     Factor to increase contrast by reducing color range.
                     [default = 1.0]
        yrng         y-axis range to show [default: None, meaning "everything"]
        xrng         x-axis range to show [default: None, meaning "everything"]
        showlnhp     show the observed lines and hyperbolae from the list
                     [default: False]
        '''
        self.prepCWFig(**kwargs)
        plt.show(block=False)


    def showStAmpFig(self, **kwargs):
        '''
        Plots the stacked amplitude results using Matplotlib. 
        You need to run .show() afterward to show it 

        INPUT:
        whichstamp   is this for the linear ("lin") or hyperbolic ("hyp") 
                     stacked amplitudes
        saturation   Factor to increase contrast by reducing color range.
                     [default = 1.0]
        yrng         y-axis range to show [default: None, meaning "everything"]
        vrng         velocities (x-axis) range to show 
                     [default: None, meaning "everything"]
        '''
        self.prepStAmpFig(**kwargs)
        plt.show(block=False)


    def displayDataInViewingWindow(self):
        # Ensure self.page_3 has a layout
        if not self.page_3.layout():
            self.page_3.setLayout(QtWidgets.QVBoxLayout())

        # Clear any existing widgets in the viewing window
        for i in reversed(range(self.page_3.layout().count())):
            self.page_3.layout().itemAt(i).widget().setParent(None)

        # Create a canvas to display the plots
        canvas = FigureCanvas(plt.figure())

        # Add canvas to the layout
        self.page_3.layout().addWidget(canvas)

        # Call the prepCWFig method to prepare the plot
        self.prepCWFig()

        # Plot the CMP or WARR data on the canvas
        self.showCWFig()

        # If you want to plot stacked amplitude results, uncomment the following lines:
        # self.prepStAmpFig()
        # self.showStAmpFig()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
